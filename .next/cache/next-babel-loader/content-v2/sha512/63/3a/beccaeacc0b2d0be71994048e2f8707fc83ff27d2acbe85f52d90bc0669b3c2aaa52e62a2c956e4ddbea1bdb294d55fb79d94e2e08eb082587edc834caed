{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\00070261\\\\React Projects\\\\nextJsMeetUp\\\\pages\\\\[meetUpId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetupDetails = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://images.unsplash.com/photo-1665478613994-a3636ae775b6?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=764&q=80\",\n    id: \"m1\",\n    title: \"A first meetup\",\n    address: \"Calle Atenas 3\",\n    description: \"My first Meeting\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n};\n\nexport default MeetupDetails;\nexport async function getStaticPaths() {\n  // Normalmente deberíamos recuperar todos los path por un async call\n  const client = await MongoClient.connect('mongodb+srv://spassaro:spassaro@meetups.omufkrd.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetUpsCollection = db.collection('meetups');\n  const meetUps = await meetUpsCollection.find({}, {\n    _id: 1\n  }).toArray(); //Selecciona de la collection de mongoDB solo los ids\n\n  return {\n    fallback: false,\n    paths: meetUps.map(meetup => ({\n      params: {\n        meetUpId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetUpId = context.params.meetUpId; // fetch data from an API\n\n  const client = await MongoClient.connect('mongodb+srv://spassaro:spassaro@meetups.omufkrd.mongodb.net/?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetUpsCollection = db.collection('meetups');\n  const selectedMeetUp = await meetUpsCollection.findOne({\n    _id: ObjectId(meetUpId)\n  }); //Selecciona el meetUp con el ObjectId = a meetuId\n\n  return {\n    props: {\n      meetup: {\n        meetupData: {\n          id: selectedMeetUp._id.toString(),\n          image: selectedMeetUp.image,\n          title: selectedMeetUp.title,\n          description: selectedMeetUp.description,\n          address: selectedMeetUp.address\n        }\n      },\n      revalidate: 1\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/00070261/React Projects/nextJsMeetUp/pages/[meetUpId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","getStaticPaths","client","connect","db","meetUpsCollection","collection","meetUps","find","_id","toArray","fallback","paths","map","meetup","params","meetUpId","toString","getStaticProps","context","selectedMeetUp","findOne","props","meetupData","id","image","title","description","address","revalidate"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AACxB,sBAAO,QAAC,YAAD;AACP,IAAA,KAAK,EAAG,+JADD;AAEP,IAAA,EAAE,EAAG,IAFE;AAGP,IAAA,KAAK,EAAG,gBAHD;AAIP,IAAA,OAAO,EAAG,gBAJH;AAKP,IAAA,WAAW,EAAG;AALP;AAAA;AAAA;AAAA;AAAA,UAAP;AAOH,CARD;;AAUA,eAAeA,aAAf;AAGA,OAAO,eAAeC,cAAf,GAAgC;AAGnC;AACA,QAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CAAoB,0FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA3B,EAAoCC,OAApC,EAAtB,CATmC,CASiC;;AACpE,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AAAX;AAAT,KAAL,CAAlB;AAFJ,GAAP;AAIH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAF0C,CAI1C;;AACA,QAAMd,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CAAoB,0FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMc,cAAc,GAAG,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AAACZ,IAAAA,GAAG,EAACV,QAAQ,CAACiB,QAAD;AAAb,GAA1B,CAA7B,CAR0C,CAQuC;;AAIjF,SAAO;AACLM,IAAAA,KAAK,EAAE;AACLR,MAAAA,MAAM,EACN;AACES,QAAAA,UAAU,EAAE;AACVC,UAAAA,EAAE,EAAEJ,cAAc,CAACX,GAAf,CAAmBQ,QAAnB,EADM;AAEVQ,UAAAA,KAAK,EAAEL,cAAc,CAACK,KAFZ;AAGVC,UAAAA,KAAK,EAAEN,cAAc,CAACM,KAHZ;AAIVC,UAAAA,WAAW,EAAEP,cAAc,CAACO,WAJlB;AAKVC,UAAAA,OAAO,EAAER,cAAc,CAACQ;AALd;AADd,OAFK;AAWPC,MAAAA,UAAU,EAAE;AAXL;AADF,GAAP;AAeD","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nconst MeetupDetails = () => {\r\n    return <MeetupDetail\r\n    image = 'https://images.unsplash.com/photo-1665478613994-a3636ae775b6?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=764&q=80'\r\n    id = 'm1'\r\n    title = 'A first meetup'\r\n    address = 'Calle Atenas 3'\r\n    description = 'My first Meeting'\r\n    />\r\n}\r\n\r\nexport default MeetupDetails\r\n\r\n\r\nexport async function getStaticPaths() {\r\n\r\n\r\n    // Normalmente deberíamos recuperar todos los path por un async call\r\n    const client = await MongoClient.connect('mongodb+srv://spassaro:spassaro@meetups.omufkrd.mongodb.net/?retryWrites=true&w=majority')\r\n    const db = client.db()\r\n\r\n    const meetUpsCollection = db.collection('meetups');\r\n\r\n    const meetUps = await meetUpsCollection.find({}, {_id:1}).toArray() //Selecciona de la collection de mongoDB solo los ids\r\n    return {\r\n        fallback: false,\r\n        paths: meetUps.map(meetup => ({params: {meetUpId: meetup._id.toString()}}))\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    \r\n    const meetUpId = context.params.meetUpId\r\n\r\n    // fetch data from an API\r\n    const client = await MongoClient.connect('mongodb+srv://spassaro:spassaro@meetups.omufkrd.mongodb.net/?retryWrites=true&w=majority')\r\n    const db = client.db()\r\n    const meetUpsCollection = db.collection('meetups');\r\n    const selectedMeetUp = await meetUpsCollection.findOne({_id:ObjectId(meetUpId)}) //Selecciona el meetUp con el ObjectId = a meetuId\r\n\r\n\r\n\r\n    return {\r\n      props: {\r\n        meetup:     \r\n        {        \r\n          meetupData: {\r\n            id: selectedMeetUp._id.toString(),\r\n            image: selectedMeetUp.image,\r\n            title: selectedMeetUp.title,\r\n            description: selectedMeetUp.description,\r\n            address: selectedMeetUp.address\r\n          },\r\n        },\r\n      revalidate: 1\r\n      }\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}